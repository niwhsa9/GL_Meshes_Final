#version 450

in vec4 FragPos; //in vec3 FragPos
in vec4 Normal;
in vec2 TexCoord;

out vec4 finalColor;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform sampler2D tex;

void main() {
    vec3 normal = normalize(vec3(Normal.x, Normal.y, Normal.z));
    vec3 lightDir = normalize(lightPos-vec3(FragPos.x, FragPos.y, FragPos.z));
    float diffuse = max(dot(normal, lightDir), 0.0);
    vec3 diffuseF = diffuse * lightColor;

    float ambient = 0.2;
    vec3 ambientF = ambient * lightColor;


    float specS = 0.2;
    vec3 viewDir = normalize(viewPos-vec3(FragPos.x, FragPos.y, FragPos.z));
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specularF = specS * spec * lightColor; 
 
    vec4 lighting = vec4((diffuseF + ambientF + specularF), 1.0); //+ specularF
    finalColor = lighting * texture(tex, TexCoord); //vec4(1.0f, 1.0f, 0.0f, 1.0f)
}